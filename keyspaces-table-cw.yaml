Parameters:
  CloudwatchDashBoardNameParameter:
    Type: String
    Default: myCloudwatchDashboard
    Description: The name of your Amazon Cloud Watch Dashboard for your table's metrics
  CassandraKeyspaceParameter:
      Type: String
      Default: my_keyspace_name
      Description: The name of your Amazon Keyspaces' Keyspace
  CassandraTableParameter:
    Type: String
    Default: my_table_name
    Description: The name of your Amazon Keyspaces' Table
  CassandraRegion:
    Type: String
    Default: "us-east-1"
    Description: The region of your Amazon Keyspaces' Table.
Resources:
   CWD725Q:
      Type: AWS::CloudWatch::Dashboard
      Properties:
        DashboardName:
          Ref: CloudwatchDashBoardNameParameter
        DashboardBody:
          !Sub
          '{
    "widgets": [
        {
            "type": "metric",
            "x": 0,
            "y": 0,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m2/PERIOD(m2)", "label": "Consumed", "id": "e1", "region": "${CassandraRegion}", "color": "#2ca02c" } ],
                    [ { "expression": "m3/PERIOD(m3)", "label": "TTLDeletes", "id": "e2", "region": "${CassandraRegion}", "color": "#d62728" } ],
                    [ "AWS/Cassandra", "ProvisionedWriteCapacityUnits", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", { "id": "m1", "label": "Provisioned", "color": "#1f77b4" } ],
                    [ ".", "ConsumedWriteCapacityUnits", ".", ".", ".", ".", { "stat": "Sum", "id": "m2", "visible": false, "color": "#ff7f0e" } ],
                    [ ".", "TTLDeletes", ".", ".", ".", ".", { "id": "m3", "color": "#e377c2", "stat": "Sum", "visible": false } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "stat": "Average",
                "period": 60,
                "title": "Write / Request units / per second"
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 0,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m2/PERIOD(m2)", "label": "Consumed", "id": "e1", "region": "${CassandraRegion}", "color": "#9467bd" } ],
                    [ "AWS/Cassandra", "ProvisionedReadCapacityUnits", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", { "id": "m1", "label": "Provisioned", "color": "#1f77b4", "stat": "Average" } ],
                    [ ".", "ConsumedReadCapacityUnits", ".", ".", ".", ".", { "id": "m2", "visible": false } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "stat": "Sum",
                "period": 60,
                "title": "Read / Request units / per second"
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 6,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "INSERT", "id": "e1", "color": "#2ca02c", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m2/PERIOD(m2)", "label": "UPDATE", "id": "e2", "color": "#ff7f0e", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m3/PERIOD(m3)", "label": "DELETE", "id": "e3", "color": "#d62728", "region": "${CassandraRegion}" } ],
                    [ "AWS/Cassandra", "SuccessfulRequestCount", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "INSERT", { "id": "m1", "label": "INSERT SuccessfulRequestCount", "visible": false, "color": "#ff9896" } ],
                    [ "...", "UPDATE", { "id": "m2", "label": "UPDATE SuccessfulRequestCount", "color": "#98df8a", "visible": false } ],
                    [ "...", "DELETE", { "id": "m3", "label": "DELETE SuccessfulRequestCount", "color": "#ffbb78", "visible": false } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "title": "Write / SuccessfulRequestCount / per second",
                "region": "${CassandraRegion}",
                "stat": "Sum",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 6,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "SELECT", "id": "e1", "region": "${CassandraRegion}", "color": "#9467bd" } ],
                    [ "AWS/Cassandra", "SuccessfulRequestCount", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "SELECT", { "id": "m1", "visible": false } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "period": 60,
                "stat": "Sum",
                "title": "Read / SuccessfulRequestCount / per second"
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 12,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/Cassandra", "SuccessfulRequestLatency", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "INSERT", { "color": "#2ca02c" } ],
                    [ "...", "UPDATE", { "color": "#ff7f0e" } ],
                    [ "...", "DELETE", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Write / Successful Request Latency / per second",
                "period": 300,
                "stat": "Average"
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 12,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/Cassandra", "SuccessfulRequestLatency", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "SELECT", { "color": "#9467bd", "label": "SELECT" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Read / Successful Request Latency / per second",
                "period": 300,
                "stat": "Average"
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 18,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/Cassandra", "BillableTableSizeInBytes", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", { "color": "#e377c2"} ]
                ],
                "view": "singleValue",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Billable Table Size",
                "period": 300,
                "stat": "Average"
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 18,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/Cassandra", "ReturnedItemCountBySelect", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "SELECT", { "color": "#c49c94", "label": "Rows from multi-select", "id": "m1", "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Avg Rows Returned",
                "period": 300,
                "stat": "Average"
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 24,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "INSERT", "id": "e1", "region": "${CassandraRegion}", "color": "#2ca02c" } ],
                    [ { "expression": "m2/PERIOD(m2)", "label": "UPDATE", "id": "e2", "color": "#ff7f0e", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m3/PERIOD(m3)", "label": "DELETE", "id": "e3", "color": "#d62728", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m4/PERIOD(m4)", "label": "BATCH", "id": "e3", "color": "#17becf", "region": "${CassandraRegion}" } ],
                    [ "AWS/Cassandra", "UserErrors", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "INSERT", { "color": "#2ca02c", "id": "m1", "visible": false  } ],
                    [ "...", "UPDATE", { "color": "#ff7f0e", "id": "m2" } ],
                    [ "...", "DELETE", { "color": "#d62728", "id": "m3" } ],
                    [ "...", "BATCH", { "color": "#17becf", "id": "m4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Write / User Errors / per second",
                "stat": "Sum",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 24,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "SELECT", "id": "e1", "region": "${CassandraRegion}", "color": "#9467bd" } ],
                    [ "AWS/Cassandra", "UserErrors", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "SELECT", { "label": "SELECT", "id": "m1", "color": "#9467bd", "visible": false } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Read / User Errors / per second",
                "stat": "Sum",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 30,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "INSERT", "id": "e1", "region": "${CassandraRegion}", "color": "#2ca02c" } ],
                    [ { "expression": "m2/PERIOD(m2)", "label": "UPDATE", "id": "e2", "color": "#ff7f0e", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m3/PERIOD(m3)", "label": "DELETE", "id": "e3", "color": "#d62728", "region": "${CassandraRegion}" } ],
                    [ "AWS/Cassandra", "WriteThrottleEvents", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "INSERT", { "color": "#17becf", "id": "m1", "visible": false } ],
                    [ "...", "UPDATE", { "color": "#2ca02c", "id": "m2", "visible": false } ],
                    [ "...", "DELETE", { "color": "#9467bd", "id": "m3", "visible": false } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "WriteThrottleEvents / per second",
                "stat": "Sum",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 30,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "SELECT", "id": "e1", "region": "${CassandraRegion}", "color": "#9467bd" } ],
                    [ "AWS/Cassandra", "ReadThrottleEvents", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "SELECT", { "color": "#17becf", "id": "m1", "visible": false, "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "ReadThrottleEvents / per second",
                "stat": "Sum",
                "period": 60
            }
        },

        {
            "type": "metric",
            "x": 0,
            "y": 36,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "INSERT", "id": "e1", "region": "${CassandraRegion}", "color": "#2ca02c" } ],
                    [ { "expression": "m2/PERIOD(m2)", "label": "UPDATE", "id": "e2", "region": "${CassandraRegion}", "color": "#ff7f0e" } ],
                    [ { "expression": "m3/PERIOD(m3)", "label": "DELETE", "id": "e3", "region": "${CassandraRegion}", "color": "#d62728" } ],
                    [ "AWS/Cassandra", "StoragePartitionThroughputCapacityExceeded", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "INSERT", { "color": "#17becf", "id": "m1", "visible": false, "stat": "Sum" } ],
                    [ "...", "UPDATE", { "color": "#2ca02c", "id": "m2", "visible": false, "stat": "Sum" } ],
                    [ "...", "DELETE", { "color": "#9467bd", "id": "m3", "visible": false, "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Write / Storage Partition Throughput Capacity Exceeded / per second",
                "stat": "Sum",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 36,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/Cassandra", "StoragePartitionThroughputCapacityExceeded", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "SELECT", { "color": "#9467bd", "id": "m1", "visible": false, "stat": "Sum"  } ],
                    [ { "expression": "m1/PERIOD(m1)", "label": "SELECT", "id": "e1", "region": "${CassandraRegion}", "color": "#9467bd" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Read / Storage Partition Throughput Capacity Exceeded  / per second",
                "stat": "Average",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 42,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "INSERT", "id": "e1", "region": "${CassandraRegion}", "color": "#2ca02c" } ],
                    [ { "expression": "m2/PERIOD(m2)", "label": "UPDATE", "id": "e2", "region": "${CassandraRegion}", "color": "#ff7f0e" } ],
                    [ { "expression": "m3/PERIOD(m3)", "label": "DELETE", "id": "e3", "region": "${CassandraRegion}", "color": "#d62728" } ],
                    [ "AWS/Cassandra", "PerConnectionRequestRateExceeded", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "INSERT", { "color": "#17becf", "id": "m1", "visible": false, "stat": "Sum" } ],
                    [ "...", "UPDATE", { "color": "#2ca02c", "id": "m2", "visible": false, "stat": "Sum" } ],
                    [ "...", "DELETE", { "color": "#9467bd", "id": "m3", "visible": false, "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Write / Per Connection Request Rate Exceeded / per second",
                "stat": "Average",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 42,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/Cassandra", "PerConnectionRequestRateExceeded", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "SELECT", { "color": "#9467bd", "id": "m1", "visible": false, "stat": "Sum"  } ],
                    [ { "expression": "m1/PERIOD(m1)", "label": "SELECT", "id": "e1", "region": "${CassandraRegion}", "color": "#9467bd" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Read / Per Connection Request Rate Exceeded  / per second",
                "stat": "Average",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 48,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/Cassandra", "SystemErrors", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "INSERT", { "color": "#2ca02c" } ],
                    [ "...", "UPDATE", { "color": "#ff7f0e" } ],
                    [ "...", "DELETE", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Write / System Errors / Sum / per minute",
                "stat": "Sum",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 48,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/Cassandra", "SystemErrors", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", "Operation", "SELECT", { "label": "SELECT", "color": "#9467bd" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Read / System Errors / Sum / per minute",
                "stat": "Sum",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 54,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "BATCH", "id": "e1", "color": "#17becf", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m2/PERIOD(m2)", "label": "PREPARE", "id": "e2", "color": "#e377c2", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m3/PERIOD(m3)", "label": "EXECUTE", "id": "e3", "color": "#dbdb8d", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m4/PERIOD(m4)", "label": "USE", "id": "e4", "color": "#7f7f7f", "region": "${CassandraRegion}" } ],
                    [ "AWS/Cassandra", "SuccessfulRequestCount", "Operation", "BATCH", { "id": "m1", "label": "BATCH", "visible": false, "color": "#17becf" } ],
                    [ "...", "PREPARE", { "id": "m2", "label": "PREPARE", "color": "#e377c2", "visible": false } ],
                    [ "...", "EXECUTE", { "id": "m3", "label": "EXECUTE", "color": "#dbdb8d", "visible": false } ],
                    [ "...", "USE", { "id": "m4", "label": "USE", "color": "#c5b0d5", "visible": false } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "title": "Account / SuccessfulRequestCount / per second",
                "region": "${CassandraRegion}",
                "stat": "Sum",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 54,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "BATCH", "id": "e1", "color": "#17becf", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m2/PERIOD(m2)", "label": "PREPARE", "id": "e2", "color": "#e377c2", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m3/PERIOD(m3)", "label": "EXECUTE", "id": "e3", "color": "#dbdb8d", "region": "${CassandraRegion}" } ],
                    [ { "expression": "m4/PERIOD(m4)", "label": "USE", "id": "e4", "color": "#7f7f7f", "region": "${CassandraRegion}" } ],
                    [ "AWS/Cassandra", "SuccessfulRequestLatency", "Operation", "BATCH", { "id": "m1", "label": "BATCH", "visible": false, "color": "#17becf" } ],
                    [ "...", "PREPARE", { "id": "m2", "label": "PREPARE", "color": "#e377c2", "visible": false } ],
                    [ "...", "EXECUTE", { "id": "m3", "label": "EXECUTE", "color": "#dbdb8d", "visible": false } ],
                    [ "...", "USE", { "id": "m4", "label": "USE", "color": "#c5b0d5", "visible": false } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "title": "Account / SuccessfulRequestLatency / per second",
                "region": "${CassandraRegion}",
                "stat": "Sum",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 60,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                        [ { "expression": "SELECT SUM(ActiveConnections) FROM SCHEMA(\"AWS/PrivateLinkEndpoints\", \"Endpoint Type\",\"Service Name\",\"Subnet Id\",\"VPC Endpoint Id\",\"VPC Id\") WHERE \"Service Name\" = \u0027com.amazonaws.${CassandraRegion}.cassandra\u0027 GROUP BY \"VPC Id\", \"Subnet Id\"", "label": "\u0024{LABEL}", "id": "q1", "stat": "Sum" } ]],
                "view": "timeSeries",
                "stacked": false,
                "title": "VPC Endpoint / ActiveConnections",
                "region": "${CassandraRegion}",
                "stat": "Sum",
                "yAxis": {
                    "left": {
                        "label": "Count",
                        "showUnits": false
                    }
                },
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 60,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                      [ { "expression": "SELECT SUM(BytesProcessed) FROM SCHEMA(\"AWS/PrivateLinkEndpoints\", \"Endpoint Type\",\"Service Name\",\"Subnet Id\",\"VPC Endpoint Id\",\"VPC Id\") WHERE \"Service Name\" = \u0027com.amazonaws.${CassandraRegion}.cassandra\u0027 GROUP BY \"VPC Id\", \"Subnet Id\"", "label": "\u0024{LABEL}", "id": "q1", "stat": "Sum" } ]],
                "view": "timeSeries",
                "stacked": false,
                "title": "VPC Endpoint / BytesProcessed",
                "region": "${CassandraRegion}",
                "stat": "Sum",
                "yAxis": {
                    "left": {
                        "label": "Bytes",
                        "showUnits": false
                    }
                },
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 66,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "SELECT AVG(ReplicationLatency) FROM SCHEMA(\"AWS/Cassandra\", \"Keyspace\",\"ReceivingRegion\",\"TableName\") WHERE \"Keyspace\" = \u0027${CassandraKeyspaceParameter}\u0027 AND \"TableName\" = \u0027${CassandraTableParameter}\u0027 GROUP BY \"ReceivingRegion\"", "label": "region:", "id": "q1", "region": "${CassandraRegion}" } ]
                    ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Replication Latency",
                "period": 300,
                "stat": "Average",
                "yAxis": {
                    "left": {
                        "label": "Milliseconds",
                        "showUnits": false
                    }
                }
            }
        },
        {
            "type": "metric",
            "x": 9,
            "y": 66,
            "width": 9,
            "height": 6,
            "properties": {
                "metrics": [
                      [ { "expression": "SELECT SUM(ReturnedRecordsCount) FROM SCHEMA(\"AWS/Cassandra\", \"Keyspace\",\"Operation\",\"StreamLabel\",\"TableName\") WHERE \"TableName\" = \u0027${CassandraTableParameter}\u0027 AND \"Keyspace\" = \u0027${CassandraKeyspaceParameter}\u0027 GROUP BY \"StreamLabel\"", "label": "Stream:", "id": "q1", "region": "${CassandraRegion}" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "title": "Stream record count",
                "period": 300,
                "stat": "Sum",
                "yAxis": {
                    "left": {
                        "label": "Count",
                        "showUnits": false
                    }
                }
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 72,
            "width": 6,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "SUM(SEARCH(\u0027{AWS/Cassandra,Keyspace,TableName} MetricName=\"ConsumedReadCapacityUnits\"\u0027, \u0027Sum\u0027, 300))", "label": "ConsumedAccountReadCapacitySum", "id": "e2", "visible": false, "region": "${CassandraRegion}" } ],
                    [ { "expression": "e2/300", "label": "ConsumedAccountReadCapacity", "id": "e3", "region": "${CassandraRegion}", "color": "#9467bd" } ],
                    [ { "expression": "SUM(SEARCH(\u0027{AWS/Cassandra,Keyspace,TableName} MetricName=\"ConsumedWriteCapacityUnits\"\u0027, \u0027Sum\u0027, 300))", "label": "ConsumedAccountWriteCapacitySum", "id": "e1", "region": "${CassandraRegion}", "visible": false } ],
                    [ { "expression": "e1/300", "label": "ConsumedAccountWriteCapacity", "id": "e4", "region": "${CassandraRegion}", "color": "#2ca02c" } ],
                    [ "AWS/Cassandra", "AccountMaxReads", { "id": "m1", "color": "#1f77b4" } ],
                    [ ".", "AccountMaxWrites", { "id": "m2", "color": "#ff7f0e" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "period": 300,
                "stat": "Average",
                "title": "Account / Consumed Capacity"
            }
        },
        {
            "type": "metric",
            "x": 6,
            "y": 72,
            "width": 6,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "SUM(SEARCH(\u0027{AWS/Cassandra,Keyspace,TableName} MetricName=\"ProvisionedReadCapacityUnits\"\u0027, \u0027Average\u0027, 300))", "label": "ProvsionedAccountReadCapacitySum", "id": "e2", "visible": false, "region": "${CassandraRegion}" } ],
                    [ { "expression": "e2", "label": "ProvisionedAccountReadCapacity", "id": "e3", "region": "${CassandraRegion}", "color": "#9467bd" } ],
                    [ { "expression": "SUM(SEARCH(\u0027{AWS/Cassandra,Keyspace,TableName} MetricName=\"ProvisionedWriteCapacityUnits\"\u0027, \u0027Average\u0027, 300))", "label": "ProvisionedAccountWriteCapacitySum", "id": "e1", "region": "${CassandraRegion}", "visible": false } ],
                    [ { "expression": "e1", "label": "ProvisionedAccountWriteCapacity", "id": "e4", "region": "${CassandraRegion}", "color": "#2ca02c" } ],
                    [ "AWS/Cassandra", "AccountMaxReads", { "id": "m1", "color": "#1f77b4" } ],
                    [ ".", "AccountMaxWrites", { "id": "m2", "color": "#ff7f0e" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "period": 300,
                "stat": "Average",
                "title": "Account / Provisioned Capacity"
            }
        },
        {
            "type": "metric",
            "x": 12,
            "y": 72,
            "width": 6,
            "height": 6,
            "properties": {
                "metrics": [
                    [ { "expression": "m1/PERIOD(m1)", "label": "Consumed Write Capacity", "id": "e1", "region": "${CassandraRegion}", "color": "#2ca02c" } ],
                    [ { "expression": "m2/PERIOD(m2)", "label": "Consumed Read Capacity", "id": "e2", "region": "${CassandraRegion}", "color": "#9467bd" } ],
                    [ "AWS/Cassandra", "AccountMaxTableLevelReads", { "id": "m3", "stat": "Average", "color": "#1f77b4" } ],
                    [ ".", "AccountMaxTableLevelWrites", { "id": "m4", "stat": "Average", "color": "#ff7f0e" } ],
                    [ ".", "ConsumedWriteCapacityUnits", "TableName", "${CassandraTableParameter}", "Keyspace", "${CassandraKeyspaceParameter}", { "id": "m1", "visible": false } ],
                    [ ".", "ConsumedReadCapacityUnits", ".", ".", ".", ".", { "id": "m2", "visible": false } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${CassandraRegion}",
                "period": 60,
                "stat": "Sum",
                "title": "Account Quota / Table Capacity"
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 0,
            "width": 6,
            "height": 6,
            "properties": {
                "markdown": "\nTable throughput\n==\n\nTable-level metrics for read/write throughput. Amazon Keyspaces meters on-demand throughput by using read request units (RRUs) and write request units (WRUs), and provisioned throughput by using read capacity units (RCUs) and write capacity unites (WCUs). Learn more about [Read/Write Capacity Modes in Amazon Keyspaces](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html).\n\n-   *Consumed*: The number of read/write units consumed per second. The dashboard displays consumed metrics for both on-demand and provisioned throughput.\n-   *Provisioned*: The number of provisioned capacity units. The dashboard displays provisioned metrics only for provisioned throughput. You can compare the provisioned metrics to the consumed metric to track your provisioned throughput utilization over time.\n\n**FAQ**\n\n**Why don\u0027t I see provisioned metrics?**\n\nOnly tables in provisioned capacity mode will report provisioned metrics. If you only are using on-demand throughput, then you will not see provisioned metrics.\n\n**Is it possible for tables to consume more capacity than provisioned?**\n\nYes. Amazon Keyspaces helps maintain availability during short traffic spikes by allowing tables to exceed provisioned capacity settings temporarily by using burst capacity. Burst capacity enables tables to use up to the last five minutes\u0027 worth of unused read and write capacity to accommodate traffic spikes.\n\n**What should I do if my traffic is exceeding my provisioned capacity consistently?**\n\nIf your application traffic is exceeding your provisioned capacity consistently, we recommend taking one or more of the following corrective actions:\n\n* Increase the provisioned capacity of your table.\n\n* Turn on auto scaling to enable Amazon Keyspaces to adjust your provisioned capacity settings automatically in response to sustained changes in your application traffic. Learn more about [Managing Amazon Keyspaces Throughput Capacity with Application Auto Scaling](https://docs.aws.amazon.com/keyspaces/latest/devguide/autoscaling.html).\n\n* Decrease the target utilization setting in your auto scaling policy to increase the provisioned capacity of your table more quickly.\n\n* Consider using on-demand capacity mode.\n\n**What should I do if my consumed capacity never comes close to my provisioned capacity?**\n\nIf your table\u0027s provisioned capacity utilization is low, you should consider one or more of the following actions to help optimize your throughput settings:\n\n* Turn on auto scaling to enable Amazon Keyspaces to adjust your provisioned capacity settings automatically in response to sustained changes in your application traffic. Learn more about [Managing Amazon Keyspaces Throughput Capacity with Application Auto Scaling](https://docs.aws.amazon.com/keyspaces/latest/devguide/autoscaling.html).\n* Increase the target utilization setting in your auto scaling policy to increase the provisioned capacity of your table more gradually.\n* Consider using on-demand capacity mode.\n\n**Can I have different scaling policies for reads and writes if I have more reads than writes, or vice versa?**\n\n-   Yes, you can configure provisioned capacity and scaling policies independently for reads and writes .\n"
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 6,
            "width": 6,
            "height": 6,
            "properties": {
                "markdown": "\nSuccessful requests per second\n==\n\nThe number of successful CQL requests per second. This metric can differ from the consumed capacity metric because the consumed capacity metric depends on how many read/write units are consumed per CQL operation.\n\nFAQ\n---\n\n#### How should I configure my driver based on the number of requests?\n\nAmazon Keyspaces supports up to 3,000 requests per second, per TCP connection. The default behavior of most drivers is to establish a single connection to each peer IP address in the cluster. Although Amazon Keyspaces is serverless, the service exposes nine peer IP addresses to drivers for compatibility. Therefore, most drivers will support up to 27,000 requests per second by using the default settings. If you expect a single client to make more than 27,000 requests per second you should increase the number of connections per session setting.\n"
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 12,
            "width": 6,
            "height": 6,
            "properties": {
                "markdown": "\nRequest Latency\n==\n\nThe latency of successful requests to Amazon Keyspaces during the specified time period. *SuccessfulRequestLatency* can provide two different kinds of information:\n\n- The elapsed time for successful requests (*Minimum*, *Maximum*, *Sum*, or *Average*).\n\n*SuccessfulRequestLatency* reflects activity only within Amazon Keyspaces and does not take into account network latency or client-side activity.\n"
            }
        },
        {
            "height": 6,
            "width": 6,
            "x": 18,
            "y": 18,
            "type": "text",
            "properties": {
                "markdown": "\nBillableTableSizeInBytes\n==\n\nThe billable size of the table in bytes. It is the sum of the encoded size of all rows in the table. This metric helps you track your table storage costs over time.\n\n* Average – The average storage size of the table. This metric is calculated over 4 - 6 hour intervals.\n\nReturnedItemCountBySelect\n==\nThe number of rows returned by multi-row SELECT queries during the specified time period. Multi-row SELECT queries are queries which do not contain the fully qualified primary key, such a full table scans and range queries.\n\nThe number of rows returned is not necessarily the same as the number of rows that were evaluated. For example, suppose that you requested a SELECT * with ALLOW FILTERING on a table that had 100 rows, but specified a WHERE clause that narrowed the results so that only 15 rows were returned. In this case, the response from SELECT would contain a ScanCount of 100 and a Count of 15 returned rows."
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 24,
            "width": 6,
            "height": 6,
            "properties": {
                "markdown": "\nUser errors\n==\nUser errors indicates a client-side error, such as an invalid combination of parameters, an attempt to update a nonexistent table, or an incorrect request signature.\n\nExamples of user errors:\n\n* Exceeding account quota for table capacity\n* Exceeding account quota for account capacity\n* Exceeding provisioned capacity rate\n* Invalid CQL syntax\n* Table not found\n\n\n\n\n\n \n"
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 30,
            "width": 6,
            "height": 6,
            "properties": {
                "markdown": "\nThrottleEvents\n==\nThe following metric will display number of WriteThrottleExceptions or ReadThrottleExceptions when exceeding capacity. The application will see these errors as WriteTimeoutExceptions or ReadTimeoutExceptions\n\n## FAQ\n\n#### How do I reduce errors as a result of exceeding provisioned capacity?\n* Turn on Auto-Scaling\n* Increase Current Provisioned Capacity\n* Decrease Target Capacity in Auto-Scaling Policy\n* Increase Mix/Max Capacity in Auto-Scaling Policy\n* Distribute Access over time\n\n#### What are some strategies for the application respond? \n* Retry \n* Retry with [Exponential Back-off](https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/)\n"
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 36,
            "width": 6,
            "height": 6,
            "properties": {
                "markdown": "\nStorage Partition Throughput Capacity Exceeded \n==\n\n Requests to an Amazon Keyspaces storage partition that exceed the throughput capacity of the partition. Amazon Keyspaces storage partitions can support up to 1000 WCU/WRU per second or 3000 RCU/RRU per second, or a linear combination of the two. Logical Amazon Keyspaces partitions can span multiple storage partitions and are virtually unbounded in size. We recommend reviewing your data model to distribute read/write traffic across more Amazon Keyspaces logical partitions. Your application will see these errors as WriteTimeoutExceptions or ReadTimeoutExceptions.\n\n**FAQ**\n\n**How do I resolve imbalanced access in my application?**\n\n* You can resolve imbalanced access in your application by distributing traffic over partitions more evenly. \n* Consider randomizing reads and writes across partition keys or increasing the cardinality of your partition key to create more partitions. \n* Consider rate-limiting traffic to help prevent throttling exceptions by accessing over time.\n\n**What should I do if my request does not succeed due to a throttling exception?**\n\n* You can retry requests that do not succeed due to throttling exceptions. \n* Consider using a retry policy with exponential back off. Learn more about [Exponential back off](https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/) and Jitter.\n"
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 42,
            "width": 6,
            "height": 6,
            "properties": {
                "markdown": "\nPer Connection Request Rate Exceeded \n==\n\n Requests to Amazon Keyspaces that exceed the per-connection request rate quota. Each client connection to Amazon Keyspaces can support up to 3000 CQL requests per second. Clients can create multiple connections to increase throughput. \n* Consider increasing the number of local connections in your driver connection pool settings. Your application will see these errors as WriteTimeoutExceptions or ReadTimeoutExceptions. \n\n**What should I do if my request does not succeed due to a Per Connection Request Rate Exceeded error?**\n\n* First check to see if you are exceeding provisioned capacity or experiencing Storage Partition Throughput Capacity Exceeded errors. Second try rasing the number of connections in your driver connection pool settings based on your peak throughput. Additionally, you can increase the number of sessions or application instances to distribute request over more clients. \n* Consider using a retry policy with exponential back off. Learn more about [Exponential back off](https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/) and Jitter.\n"
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 48,
            "width": 6,
            "height": 6,
            "properties": {
                "markdown": "\nSystem Errors\n==\n\nThe requests to Amazon Keyspaces that generate a ServerError during the specified time period. A ServerError usually indicates an internal service error.\n\n**FAQ**\n\n**What should I do if my request does not succeed due to an internal service error?**\n\n* You can retry requests that do not succeed due to an internal service error. \n* Consider using a retry policy with exponential back off. Learn more about [Exponential back off](https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/) and Jitter.\n\n* * * * *\n"
            }
          },

        {
            "type": "text",
            "x": 18,
            "y": 54,
            "width": 6,
            "height": 6,
            "properties": {
                "markdown": "\nAccount Operations\n==\n\nThe requests against Amazon Keyspaces\u0027 system tables.\n\n**FAQ**\n\n**Do these operations consume capacity?**\n\n* No, These operations do not consumed capacity themselves. The operations represented here are executed against the system tables. Multiple tables can be involved in a single batch statement, the consumed capacity will be taken from the table specified in the individual statements contained in the batch.\n\n **Do these operations count towards the Max queries per connection quota?**\n\n* Yes, these operations are counted towards the Max queries per connection quota. Read more about [CQL Query Throughput Tuning](https://docs.aws.amazon.com/keyspaces/latest/devguide/functional-differences.html#functional-differences.query-throughput-tuning)\n"
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 60,
            "width": 6,
            "height": 6,
            "properties": {
                "markdown": "VPC Endpoint metrics\n==\n**ActiveConnections and BytesProcessed**\n\nWhen connecting to Amazon Keyspaces with VPCE the number of connections is determined by the number of (vpc endpoints * number of driver configured local connections) + one control connection per session. Each connection has the ability to perform up to 3000 request per second. If you see PerConnectionRequestRateExceeded events you may need to specify more connections. You should see ActiveConnections and BytesProcessed distributed evenly across availablity zones. If connections or traffic is skewed, then you may not have setup VPCE endpoints or driver configurations according to [best practices](https://docs.aws.amazon.com/keyspaces/latest/devguide/vpc-endpoints.html)"
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 66,
            "width": 6,
            "height": 12,
            "properties": {
                "markdown": "\n# Replication Latency\n==\n\nThis metric only applies to multi-Region keyspaces and measures the time it took to replicate updates, inserts, or deletes from one replica table to another replica table in a multi-Region keyspace. \n\n# ReturnedRecordsCount\n==\n\nThe number of stream records returned by GetRecords operations during the specified time period. This metric is relevant for Keyspaces CDC Streams."
            }
        },
        {
            "type": "text",
            "x": 18,
            "y": 72,
            "width": 6,
            "height": 12,
            "properties": {
                "markdown": "\n# Account Quotas\n\nReview default [Account Quotas](https://docs.aws.amazon.com/keyspaces/latest/devguide/quotas.html). You can view your service quotas in the [AWS Service Quotas console](https://console.aws.amazon.com/servicequotas/home#!/services/cassandra/quotas). \n\nAccountMaxWrites: The maximum number of read capacity units that can be used by an account. This limit does not apply to on-demand tables. \n\nAccountMaxReads: The maximum number of write capacity units that can be used by an account. This limit does not apply to on-demand tables or global secondary indexes. \n\nAccountMaxTableLevelWrites: The maximum number of write request units that can be used by a table of an account. For on-demand tables this limit caps the maximum write request units a table. \n\nAccountMaxTableLevelReads: The maximum number of read request units that can be used by a table of an account. For on-demand tables this limit caps the maximum read request units. \n"
            }
        }
    ]
}'
